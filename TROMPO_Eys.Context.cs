//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ElTrompo
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class TROMPO_EysCommerciaNetEntities : DbContext
    {
        public TROMPO_EysCommerciaNetEntities()
            : base("name=TROMPO_EysCommerciaNetEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Actividad> Actividads { get; set; }
        public virtual DbSet<ActividadAdjunto> ActividadAdjuntoes { get; set; }
        public virtual DbSet<ActividadResultado> ActividadResultadoes { get; set; }
        public virtual DbSet<Almacen> Almacens { get; set; }
        public virtual DbSet<Arancel> Arancels { get; set; }
        public virtual DbSet<Articulo> Articuloes { get; set; }
        public virtual DbSet<ArticuloCompuesto> ArticuloCompuestoes { get; set; }
        public virtual DbSet<ArticuloDemanda> ArticuloDemandas { get; set; }
        public virtual DbSet<ArticuloExterno> ArticuloExternoes { get; set; }
        public virtual DbSet<Bitacora> Bitacoras { get; set; }
        public virtual DbSet<BitacoraConfiguracion> BitacoraConfiguracions { get; set; }
        public virtual DbSet<BitacoraConfiguracionUsuario> BitacoraConfiguracionUsuarios { get; set; }
        public virtual DbSet<Calle> Calles { get; set; }
        public virtual DbSet<CambioPrecioDocumento> CambioPrecioDocumentoes { get; set; }
        public virtual DbSet<CambioPrecioMovimiento> CambioPrecioMovimientoes { get; set; }
        public virtual DbSet<Campana> Campanas { get; set; }
        public virtual DbSet<CampanaActividad> CampanaActividads { get; set; }
        public virtual DbSet<CampanaTipo> CampanaTipoes { get; set; }
        public virtual DbSet<Cliente> Clientes { get; set; }
        public virtual DbSet<ClienteCFD> ClienteCFDs { get; set; }
        public virtual DbSet<Codigo> Codigoes { get; set; }
        public virtual DbSet<Colector> Colectors { get; set; }
        public virtual DbSet<ColectorArticulo> ColectorArticuloes { get; set; }
        public virtual DbSet<Comunica> Comunicas { get; set; }
        public virtual DbSet<Concepto> Conceptoes { get; set; }
        public virtual DbSet<Consulta> Consultas { get; set; }
        public virtual DbSet<ConsultaCampo> ConsultaCampoes { get; set; }
        public virtual DbSet<ConsultaMenu> ConsultaMenus { get; set; }
        public virtual DbSet<Contacto> Contactoes { get; set; }
        public virtual DbSet<Costeo> Costeos { get; set; }
        public virtual DbSet<Costo> Costoes { get; set; }
        public virtual DbSet<CrmDocumento> CrmDocumentoes { get; set; }
        public virtual DbSet<CrmDocumentoActividad> CrmDocumentoActividads { get; set; }
        public virtual DbSet<Documento> Documentoes { get; set; }
        public virtual DbSet<DocumentoCFD> DocumentoCFDs { get; set; }
        public virtual DbSet<DocumentoConceptoPago> DocumentoConceptoPagoes { get; set; }
        public virtual DbSet<DocumentoObservacion> DocumentoObservacions { get; set; }
        public virtual DbSet<DocumentoPagoElectronico> DocumentoPagoElectronicoes { get; set; }
        public virtual DbSet<DocumentoPedimento> DocumentoPedimentoes { get; set; }
        public virtual DbSet<DocumentoReferencia> DocumentoReferencias { get; set; }
        public virtual DbSet<DocumentoRelacionado> DocumentoRelacionadoes { get; set; }
        public virtual DbSet<Empaque> Empaques { get; set; }
        public virtual DbSet<Empresa> Empresas { get; set; }
        public virtual DbSet<EmpresaCFD> EmpresaCFDs { get; set; }
        public virtual DbSet<EmpresaGrupo> EmpresaGrupoes { get; set; }
        public virtual DbSet<EmpresaUsuario> EmpresaUsuarios { get; set; }
        public virtual DbSet<Estado> Estadoes { get; set; }
        public virtual DbSet<Estatu> Estatus { get; set; }
        public virtual DbSet<EtiquetaImprime> EtiquetaImprimes { get; set; }
        public virtual DbSet<Existencia> Existencias { get; set; }
        public virtual DbSet<Familia> Familias { get; set; }
        public virtual DbSet<FamiliaArticulo> FamiliaArticuloes { get; set; }
        public virtual DbSet<Flete> Fletes { get; set; }
        public virtual DbSet<FleteTipo> FleteTipoes { get; set; }
        public virtual DbSet<FolioCFD> FolioCFDs { get; set; }
        public virtual DbSet<Formula> Formulae { get; set; }
        public virtual DbSet<FormulaRelacion> FormulaRelacions { get; set; }
        public virtual DbSet<Fraccion> Fraccions { get; set; }
        public virtual DbSet<Impresor> Impresors { get; set; }
        public virtual DbSet<ImpresorSistema> ImpresorSistemas { get; set; }
        public virtual DbSet<Impuesto> Impuestoes { get; set; }
        public virtual DbSet<InventarioMovimiento> InventarioMovimientoes { get; set; }
        public virtual DbSet<Linea> Lineas { get; set; }
        public virtual DbSet<Lista> Listas { get; set; }
        public virtual DbSet<ListaDetalle> ListaDetalles { get; set; }
        public virtual DbSet<Margen> Margens { get; set; }
        public virtual DbSet<MargenPorcentaje> MargenPorcentajes { get; set; }
        public virtual DbSet<MenuElemento> MenuElementoes { get; set; }
        public virtual DbSet<MenuUsuario> MenuUsuarios { get; set; }
        public virtual DbSet<Moneda> Monedas { get; set; }
        public virtual DbSet<Movimiento> Movimientoes { get; set; }
        public virtual DbSet<MovimientoFormula> MovimientoFormulas { get; set; }
        public virtual DbSet<MovimientoObservacion> MovimientoObservacions { get; set; }
        public virtual DbSet<MovimientoReferencia> MovimientoReferencias { get; set; }
        public virtual DbSet<Municipio> Municipios { get; set; }
        public virtual DbSet<OfertaCompra> OfertaCompras { get; set; }
        public virtual DbSet<OfertaVenta> OfertaVentas { get; set; }
        public virtual DbSet<OfertaVentaArticulo> OfertaVentaArticuloes { get; set; }
        public virtual DbSet<Operacion> Operacions { get; set; }
        public virtual DbSet<OperacionColumna> OperacionColumnas { get; set; }
        public virtual DbSet<Ordena> Ordenas { get; set; }
        public virtual DbSet<Pai> Pais { get; set; }
        public virtual DbSet<PedimentoCosteo> PedimentoCosteos { get; set; }
        public virtual DbSet<Permiso> Permisoes { get; set; }
        public virtual DbSet<PermisoUsuario> PermisoUsuarios { get; set; }
        public virtual DbSet<Precio> Precios { get; set; }
        public virtual DbSet<ProduccionMovimiento> ProduccionMovimientoes { get; set; }
        public virtual DbSet<Promocion> Promocions { get; set; }
        public virtual DbSet<PromocionCliente> PromocionClientes { get; set; }
        public virtual DbSet<Proveedor> Proveedors { get; set; }
        public virtual DbSet<Punto> Puntos { get; set; }
        public virtual DbSet<Reporte> Reportes { get; set; }
        public virtual DbSet<Resultado> Resultadoes { get; set; }
        public virtual DbSet<Ruta> Rutas { get; set; }
        public virtual DbSet<Sucursal> Sucursals { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<Tarea> Tareas { get; set; }
        public virtual DbSet<Tecla> Teclas { get; set; }
        public virtual DbSet<TipoCambioOficial> TipoCambioOficials { get; set; }
        public virtual DbSet<TipoCliente> TipoClientes { get; set; }
        public virtual DbSet<TipoFamilia> TipoFamilias { get; set; }
        public virtual DbSet<Transaccion> Transaccions { get; set; }
        public virtual DbSet<TransaccionEstatu> TransaccionEstatus { get; set; }
        public virtual DbSet<Turno> Turnoes { get; set; }
        public virtual DbSet<Ubicacion> Ubicacions { get; set; }
        public virtual DbSet<UbicacionArticulo> UbicacionArticuloes { get; set; }
        public virtual DbSet<Usuario> Usuarios { get; set; }
        public virtual DbSet<UsuarioLog> UsuarioLogs { get; set; }
        public virtual DbSet<Variable> Variables { get; set; }
        public virtual DbSet<Vendedor> Vendedors { get; set; }
        public virtual DbSet<VentaPerdida> VentaPerdidas { get; set; }
        public virtual DbSet<Zona> Zonas { get; set; }
        public virtual DbSet<EtiMov> EtiMovs { get; set; }
        public virtual DbSet<ExtArticulo> ExtArticuloes { get; set; }
        public virtual DbSet<Mix> Mixes { get; set; }
        public virtual DbSet<ProcesoImagen> ProcesoImagens { get; set; }
        public virtual DbSet<ProcesoLinea> ProcesoLineas { get; set; }
        public virtual DbSet<ProcesoObjeto> ProcesoObjetoes { get; set; }
        public virtual DbSet<ProcesoProyectoNombre> ProcesoProyectoNombres { get; set; }
        public virtual DbSet<Information_Schema_Articulo> Information_Schema_Articulo { get; set; }
        public virtual DbSet<MovimientoPedimento> MovimientoPedimentoes { get; set; }
    
        public virtual int sp_ActualizaMovimientosPaquetes(Nullable<int> mes, Nullable<int> dia)
        {
            var mesParameter = mes.HasValue ?
                new ObjectParameter("mes", mes) :
                new ObjectParameter("mes", typeof(int));
    
            var diaParameter = dia.HasValue ?
                new ObjectParameter("dia", dia) :
                new ObjectParameter("dia", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ActualizaMovimientosPaquetes", mesParameter, diaParameter);
        }
    
        public virtual int sp_AgregaMovimiento_Costeo(string articuloid, string almacenid)
        {
            var articuloidParameter = articuloid != null ?
                new ObjectParameter("articuloid", articuloid) :
                new ObjectParameter("articuloid", typeof(string));
    
            var almacenidParameter = almacenid != null ?
                new ObjectParameter("almacenid", almacenid) :
                new ObjectParameter("almacenid", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_AgregaMovimiento_Costeo", articuloidParameter, almacenidParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_CalculaSaldoGlobal(string clienteid, string proveedorid)
        {
            var clienteidParameter = clienteid != null ?
                new ObjectParameter("clienteid", clienteid) :
                new ObjectParameter("clienteid", typeof(string));
    
            var proveedoridParameter = proveedorid != null ?
                new ObjectParameter("proveedorid", proveedorid) :
                new ObjectParameter("proveedorid", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_CalculaSaldoGlobal", clienteidParameter, proveedoridParameter);
        }
    
        public virtual int sp_CalculaSaldoGlobalV2(string clienteid, string proveedorid)
        {
            var clienteidParameter = clienteid != null ?
                new ObjectParameter("clienteid", clienteid) :
                new ObjectParameter("clienteid", typeof(string));
    
            var proveedoridParameter = proveedorid != null ?
                new ObjectParameter("proveedorid", proveedorid) :
                new ObjectParameter("proveedorid", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_CalculaSaldoGlobalV2", clienteidParameter, proveedoridParameter);
        }
    
        public virtual int sp_CalculaSaldoTodosClientes()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_CalculaSaldoTodosClientes");
        }
    
        public virtual int sp_CalculaSaldoTodosClientes_V2()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_CalculaSaldoTodosClientes_V2");
        }
    
        public virtual int sp_Costeo_ActualizaMovimiento(string articuloid)
        {
            var articuloidParameter = articuloid != null ?
                new ObjectParameter("articuloid", articuloid) :
                new ObjectParameter("articuloid", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Costeo_ActualizaMovimiento", articuloidParameter);
        }
    
        public virtual int sp_Costeo_CalculaCosteo(string articuloid, string almacenid, Nullable<bool> inventarioreal, Nullable<double> unidades, ObjectParameter costo)
        {
            var articuloidParameter = articuloid != null ?
                new ObjectParameter("articuloid", articuloid) :
                new ObjectParameter("articuloid", typeof(string));
    
            var almacenidParameter = almacenid != null ?
                new ObjectParameter("almacenid", almacenid) :
                new ObjectParameter("almacenid", typeof(string));
    
            var inventariorealParameter = inventarioreal.HasValue ?
                new ObjectParameter("inventarioreal", inventarioreal) :
                new ObjectParameter("inventarioreal", typeof(bool));
    
            var unidadesParameter = unidades.HasValue ?
                new ObjectParameter("unidades", unidades) :
                new ObjectParameter("unidades", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Costeo_CalculaCosteo", articuloidParameter, almacenidParameter, inventariorealParameter, unidadesParameter, costo);
        }
    
        public virtual int sp_Costeo_CalculaCostoCapa(string articuloid, Nullable<System.DateTime> fechamovimiento, string almacenid, ObjectParameter existencia, ObjectParameter costocapa)
        {
            var articuloidParameter = articuloid != null ?
                new ObjectParameter("articuloid", articuloid) :
                new ObjectParameter("articuloid", typeof(string));
    
            var fechamovimientoParameter = fechamovimiento.HasValue ?
                new ObjectParameter("fechamovimiento", fechamovimiento) :
                new ObjectParameter("fechamovimiento", typeof(System.DateTime));
    
            var almacenidParameter = almacenid != null ?
                new ObjectParameter("almacenid", almacenid) :
                new ObjectParameter("almacenid", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Costeo_CalculaCostoCapa", articuloidParameter, fechamovimientoParameter, almacenidParameter, existencia, costocapa);
        }
    
        public virtual int sp_Costeo_Inserta(string empresaid, string sucursalid, string operacionid, string folio, Nullable<int> renglon, string almacenid, string articuloid, Nullable<double> unidad, Nullable<double> factorunidad, ObjectParameter costoneto, Nullable<System.DateTime> fechamovimiento, Nullable<double> tipocambio, Nullable<System.DateTime> fechahora)
        {
            var empresaidParameter = empresaid != null ?
                new ObjectParameter("empresaid", empresaid) :
                new ObjectParameter("empresaid", typeof(string));
    
            var sucursalidParameter = sucursalid != null ?
                new ObjectParameter("sucursalid", sucursalid) :
                new ObjectParameter("sucursalid", typeof(string));
    
            var operacionidParameter = operacionid != null ?
                new ObjectParameter("operacionid", operacionid) :
                new ObjectParameter("operacionid", typeof(string));
    
            var folioParameter = folio != null ?
                new ObjectParameter("folio", folio) :
                new ObjectParameter("folio", typeof(string));
    
            var renglonParameter = renglon.HasValue ?
                new ObjectParameter("renglon", renglon) :
                new ObjectParameter("renglon", typeof(int));
    
            var almacenidParameter = almacenid != null ?
                new ObjectParameter("almacenid", almacenid) :
                new ObjectParameter("almacenid", typeof(string));
    
            var articuloidParameter = articuloid != null ?
                new ObjectParameter("articuloid", articuloid) :
                new ObjectParameter("articuloid", typeof(string));
    
            var unidadParameter = unidad.HasValue ?
                new ObjectParameter("unidad", unidad) :
                new ObjectParameter("unidad", typeof(double));
    
            var factorunidadParameter = factorunidad.HasValue ?
                new ObjectParameter("factorunidad", factorunidad) :
                new ObjectParameter("factorunidad", typeof(double));
    
            var fechamovimientoParameter = fechamovimiento.HasValue ?
                new ObjectParameter("fechamovimiento", fechamovimiento) :
                new ObjectParameter("fechamovimiento", typeof(System.DateTime));
    
            var tipocambioParameter = tipocambio.HasValue ?
                new ObjectParameter("tipocambio", tipocambio) :
                new ObjectParameter("tipocambio", typeof(double));
    
            var fechahoraParameter = fechahora.HasValue ?
                new ObjectParameter("fechahora", fechahora) :
                new ObjectParameter("fechahora", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Costeo_Inserta", empresaidParameter, sucursalidParameter, operacionidParameter, folioParameter, renglonParameter, almacenidParameter, articuloidParameter, unidadParameter, factorunidadParameter, costoneto, fechamovimientoParameter, tipocambioParameter, fechahoraParameter);
        }
    
        public virtual int sp_Costeo_Peps(string articuloid, string almacenid, Nullable<bool> inventarioreal, Nullable<double> unidades, ObjectParameter costo)
        {
            var articuloidParameter = articuloid != null ?
                new ObjectParameter("articuloid", articuloid) :
                new ObjectParameter("articuloid", typeof(string));
    
            var almacenidParameter = almacenid != null ?
                new ObjectParameter("almacenid", almacenid) :
                new ObjectParameter("almacenid", typeof(string));
    
            var inventariorealParameter = inventarioreal.HasValue ?
                new ObjectParameter("inventarioreal", inventarioreal) :
                new ObjectParameter("inventarioreal", typeof(bool));
    
            var unidadesParameter = unidades.HasValue ?
                new ObjectParameter("unidades", unidades) :
                new ObjectParameter("unidades", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Costeo_Peps", articuloidParameter, almacenidParameter, inventariorealParameter, unidadesParameter, costo);
        }
    
        public virtual int sp_Costeo_Promedio(string articuloid, string almacenid, Nullable<bool> inventarioreal, Nullable<double> unidades, ObjectParameter costo)
        {
            var articuloidParameter = articuloid != null ?
                new ObjectParameter("articuloid", articuloid) :
                new ObjectParameter("articuloid", typeof(string));
    
            var almacenidParameter = almacenid != null ?
                new ObjectParameter("almacenid", almacenid) :
                new ObjectParameter("almacenid", typeof(string));
    
            var inventariorealParameter = inventarioreal.HasValue ?
                new ObjectParameter("inventarioreal", inventarioreal) :
                new ObjectParameter("inventarioreal", typeof(bool));
    
            var unidadesParameter = unidades.HasValue ?
                new ObjectParameter("unidades", unidades) :
                new ObjectParameter("unidades", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Costeo_Promedio", articuloidParameter, almacenidParameter, inventariorealParameter, unidadesParameter, costo);
        }
    
        public virtual int sp_Costeo_Recalcalcula_Capas(string articulo, Nullable<System.DateTime> fechaMod, string almacenid, string empresa, string sucursal)
        {
            var articuloParameter = articulo != null ?
                new ObjectParameter("Articulo", articulo) :
                new ObjectParameter("Articulo", typeof(string));
    
            var fechaModParameter = fechaMod.HasValue ?
                new ObjectParameter("FechaMod", fechaMod) :
                new ObjectParameter("FechaMod", typeof(System.DateTime));
    
            var almacenidParameter = almacenid != null ?
                new ObjectParameter("almacenid", almacenid) :
                new ObjectParameter("almacenid", typeof(string));
    
            var empresaParameter = empresa != null ?
                new ObjectParameter("Empresa", empresa) :
                new ObjectParameter("Empresa", typeof(string));
    
            var sucursalParameter = sucursal != null ?
                new ObjectParameter("Sucursal", sucursal) :
                new ObjectParameter("Sucursal", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Costeo_Recalcalcula_Capas", articuloParameter, fechaModParameter, almacenidParameter, empresaParameter, sucursalParameter);
        }
    
        public virtual int sp_Costeo_Ueps(string articuloid, string almacenid, Nullable<bool> inventarioreal, Nullable<double> unidades, ObjectParameter costo)
        {
            var articuloidParameter = articuloid != null ?
                new ObjectParameter("articuloid", articuloid) :
                new ObjectParameter("articuloid", typeof(string));
    
            var almacenidParameter = almacenid != null ?
                new ObjectParameter("almacenid", almacenid) :
                new ObjectParameter("almacenid", typeof(string));
    
            var inventariorealParameter = inventarioreal.HasValue ?
                new ObjectParameter("inventarioreal", inventarioreal) :
                new ObjectParameter("inventarioreal", typeof(bool));
    
            var unidadesParameter = unidades.HasValue ?
                new ObjectParameter("unidades", unidades) :
                new ObjectParameter("unidades", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Costeo_Ueps", articuloidParameter, almacenidParameter, inventariorealParameter, unidadesParameter, costo);
        }
    
        public virtual int sp_Costeo_Ultimo(string articuloid, string almacenid, Nullable<bool> inventarioreal, Nullable<double> unidades, ObjectParameter costo)
        {
            var articuloidParameter = articuloid != null ?
                new ObjectParameter("articuloid", articuloid) :
                new ObjectParameter("articuloid", typeof(string));
    
            var almacenidParameter = almacenid != null ?
                new ObjectParameter("almacenid", almacenid) :
                new ObjectParameter("almacenid", typeof(string));
    
            var inventariorealParameter = inventarioreal.HasValue ?
                new ObjectParameter("inventarioreal", inventarioreal) :
                new ObjectParameter("inventarioreal", typeof(bool));
    
            var unidadesParameter = unidades.HasValue ?
                new ObjectParameter("unidades", unidades) :
                new ObjectParameter("unidades", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Costeo_Ultimo", articuloidParameter, almacenidParameter, inventariorealParameter, unidadesParameter, costo);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_ExportarDocumentos(string sucursalIdOrigen, string empresaIdOrigen, string sucursalIdDestino, string empresaIdDestino)
        {
            var sucursalIdOrigenParameter = sucursalIdOrigen != null ?
                new ObjectParameter("SucursalIdOrigen", sucursalIdOrigen) :
                new ObjectParameter("SucursalIdOrigen", typeof(string));
    
            var empresaIdOrigenParameter = empresaIdOrigen != null ?
                new ObjectParameter("EmpresaIdOrigen", empresaIdOrigen) :
                new ObjectParameter("EmpresaIdOrigen", typeof(string));
    
            var sucursalIdDestinoParameter = sucursalIdDestino != null ?
                new ObjectParameter("SucursalIdDestino", sucursalIdDestino) :
                new ObjectParameter("SucursalIdDestino", typeof(string));
    
            var empresaIdDestinoParameter = empresaIdDestino != null ?
                new ObjectParameter("EmpresaIdDestino", empresaIdDestino) :
                new ObjectParameter("EmpresaIdDestino", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ExportarDocumentos", sucursalIdOrigenParameter, empresaIdOrigenParameter, sucursalIdDestinoParameter, empresaIdDestinoParameter);
        }
    
        public virtual int sp_ExportarDocumentosCI(string sucursalIdOrigen, string empresaIdOrigen, string sucursalIdDestino, string empresaIdDestino)
        {
            var sucursalIdOrigenParameter = sucursalIdOrigen != null ?
                new ObjectParameter("SucursalIdOrigen", sucursalIdOrigen) :
                new ObjectParameter("SucursalIdOrigen", typeof(string));
    
            var empresaIdOrigenParameter = empresaIdOrigen != null ?
                new ObjectParameter("EmpresaIdOrigen", empresaIdOrigen) :
                new ObjectParameter("EmpresaIdOrigen", typeof(string));
    
            var sucursalIdDestinoParameter = sucursalIdDestino != null ?
                new ObjectParameter("SucursalIdDestino", sucursalIdDestino) :
                new ObjectParameter("SucursalIdDestino", typeof(string));
    
            var empresaIdDestinoParameter = empresaIdDestino != null ?
                new ObjectParameter("EmpresaIdDestino", empresaIdDestino) :
                new ObjectParameter("EmpresaIdDestino", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ExportarDocumentosCI", sucursalIdOrigenParameter, empresaIdOrigenParameter, sucursalIdDestinoParameter, empresaIdDestinoParameter);
        }
    
        public virtual int sp_ExportarMovimientos(string sucursalIdOrigen, string empresaIdOrigen, string sucursalIdDestino, string empresaIdDestino)
        {
            var sucursalIdOrigenParameter = sucursalIdOrigen != null ?
                new ObjectParameter("SucursalIdOrigen", sucursalIdOrigen) :
                new ObjectParameter("SucursalIdOrigen", typeof(string));
    
            var empresaIdOrigenParameter = empresaIdOrigen != null ?
                new ObjectParameter("EmpresaIdOrigen", empresaIdOrigen) :
                new ObjectParameter("EmpresaIdOrigen", typeof(string));
    
            var sucursalIdDestinoParameter = sucursalIdDestino != null ?
                new ObjectParameter("SucursalIdDestino", sucursalIdDestino) :
                new ObjectParameter("SucursalIdDestino", typeof(string));
    
            var empresaIdDestinoParameter = empresaIdDestino != null ?
                new ObjectParameter("EmpresaIdDestino", empresaIdDestino) :
                new ObjectParameter("EmpresaIdDestino", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ExportarMovimientos", sucursalIdOrigenParameter, empresaIdOrigenParameter, sucursalIdDestinoParameter, empresaIdDestinoParameter);
        }
    
        public virtual int sp_generate_inserts(string table_name, string target_table, Nullable<bool> include_column_list, string from, Nullable<bool> include_timestamp, Nullable<bool> debug_mode, string owner, Nullable<bool> ommit_images, Nullable<bool> ommit_identity, Nullable<int> top, string cols_to_include, string cols_to_exclude, Nullable<bool> disable_constraints, Nullable<bool> ommit_computed_cols)
        {
            var table_nameParameter = table_name != null ?
                new ObjectParameter("table_name", table_name) :
                new ObjectParameter("table_name", typeof(string));
    
            var target_tableParameter = target_table != null ?
                new ObjectParameter("target_table", target_table) :
                new ObjectParameter("target_table", typeof(string));
    
            var include_column_listParameter = include_column_list.HasValue ?
                new ObjectParameter("include_column_list", include_column_list) :
                new ObjectParameter("include_column_list", typeof(bool));
    
            var fromParameter = from != null ?
                new ObjectParameter("from", from) :
                new ObjectParameter("from", typeof(string));
    
            var include_timestampParameter = include_timestamp.HasValue ?
                new ObjectParameter("include_timestamp", include_timestamp) :
                new ObjectParameter("include_timestamp", typeof(bool));
    
            var debug_modeParameter = debug_mode.HasValue ?
                new ObjectParameter("debug_mode", debug_mode) :
                new ObjectParameter("debug_mode", typeof(bool));
    
            var ownerParameter = owner != null ?
                new ObjectParameter("owner", owner) :
                new ObjectParameter("owner", typeof(string));
    
            var ommit_imagesParameter = ommit_images.HasValue ?
                new ObjectParameter("ommit_images", ommit_images) :
                new ObjectParameter("ommit_images", typeof(bool));
    
            var ommit_identityParameter = ommit_identity.HasValue ?
                new ObjectParameter("ommit_identity", ommit_identity) :
                new ObjectParameter("ommit_identity", typeof(bool));
    
            var topParameter = top.HasValue ?
                new ObjectParameter("top", top) :
                new ObjectParameter("top", typeof(int));
    
            var cols_to_includeParameter = cols_to_include != null ?
                new ObjectParameter("cols_to_include", cols_to_include) :
                new ObjectParameter("cols_to_include", typeof(string));
    
            var cols_to_excludeParameter = cols_to_exclude != null ?
                new ObjectParameter("cols_to_exclude", cols_to_exclude) :
                new ObjectParameter("cols_to_exclude", typeof(string));
    
            var disable_constraintsParameter = disable_constraints.HasValue ?
                new ObjectParameter("disable_constraints", disable_constraints) :
                new ObjectParameter("disable_constraints", typeof(bool));
    
            var ommit_computed_colsParameter = ommit_computed_cols.HasValue ?
                new ObjectParameter("ommit_computed_cols", ommit_computed_cols) :
                new ObjectParameter("ommit_computed_cols", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_generate_inserts", table_nameParameter, target_tableParameter, include_column_listParameter, fromParameter, include_timestampParameter, debug_modeParameter, ownerParameter, ommit_imagesParameter, ommit_identityParameter, topParameter, cols_to_includeParameter, cols_to_excludeParameter, disable_constraintsParameter, ommit_computed_colsParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int SP_importa_excel(string server_name_new)
        {
            var server_name_newParameter = server_name_new != null ?
                new ObjectParameter("server_name_new", server_name_new) :
                new ObjectParameter("server_name_new", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_importa_excel", server_name_newParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual ObjectResult<sp_RevisionCapaCosteo_Result> sp_RevisionCapaCosteo(string articuloid, string almacenid, Nullable<double> unidadSolicitada)
        {
            var articuloidParameter = articuloid != null ?
                new ObjectParameter("articuloid", articuloid) :
                new ObjectParameter("articuloid", typeof(string));
    
            var almacenidParameter = almacenid != null ?
                new ObjectParameter("almacenid", almacenid) :
                new ObjectParameter("almacenid", typeof(string));
    
            var unidadSolicitadaParameter = unidadSolicitada.HasValue ?
                new ObjectParameter("unidadSolicitada", unidadSolicitada) :
                new ObjectParameter("unidadSolicitada", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_RevisionCapaCosteo_Result>("sp_RevisionCapaCosteo", articuloidParameter, almacenidParameter, unidadSolicitadaParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    }
}
